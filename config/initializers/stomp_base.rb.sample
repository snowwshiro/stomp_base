# StompBase設定サンプル
# このファイルをconfig/initializers/stomp_base.rbにコピーして使用してください

StompBase.configure do |config|
  # ロケール設定
  config.locale = :ja  # または :en
  
  # === 認証設定の例 ===
  
  # 1. Basic認証を使用する場合
  # config.enable_authentication(
  #   method: :basic_auth,
  #   username: 'admin',
  #   password: 'your_secure_password'  # 本番環境では ENV['PASSWORD'] を使用推奨
  # )
  
  # 2. APIキー認証を使用する場合
  # config.enable_authentication(
  #   method: :api_key,
  #   keys: ['your-api-key-1', 'your-api-key-2']  # 本番環境では ENV['API_KEYS'].split(',') を使用推奨
  # )
  
  # 3. カスタム認証を使用する場合
  # config.enable_authentication(
  #   method: :custom,
  #   authenticator: ->(request, params) {
  #     # 独自の認証ロジックを実装
  #     # trueを返すと認証成功、falseを返すと認証失敗
  #     token = request.headers['Authorization']
  #     # 例: JWT認証、独自トークン認証など
  #     token == "Bearer #{ENV['SECRET_TOKEN']}"
  #   }
  # )
  
  # 4. 環境別設定の例
  if Rails.env.production?
    # 本番環境では強固な認証
    config.enable_authentication(
      method: :api_key,
      keys: ENV['STOMP_BASE_API_KEYS']&.split(',') || []
    )
  elsif Rails.env.development?
    # 開発環境では簡単な認証（必要に応じて）
    # config.enable_authentication(
    #   method: :basic_auth,
    #   username: 'dev',
    #   password: 'dev'
    # )
    
    # または開発環境では認証を無効化
    config.disable_authentication
  else
    # テスト環境では認証無効
    config.disable_authentication
  end
end

# === 設定後に使用可能なヘルパーメソッド ===
# 
# 認証状態の確認:
# StompBase.authentication_enabled?
# 
# 動的な認証設定変更:
# StompBase.enable_authentication(method: :basic_auth, username: 'user', password: 'pass')
# StompBase.disable_authentication
